{
  "AWSTemplateFormatVersion" : "2010-09-09",

  "Description" : "Lambda function To build and deploy sitemaps",

  "Parameters" : {

    "StackOutputsArn" : {
      "Type" : "String"
    },

    "FunctionPackage" : {
      "Type" : "String"
    },

    "FunctionDescription" : {
      "Type" : "String",
      "Default" : "Lambda function To build and deploy sitemaps"
    },

    "FunctionVersion" : {
      "Type" : "String"
    },

    "StackOutputsArn" : {
      "Type" : "String"
    },

    "ScheduleExpression" : {
      "Type" : "String"
    }

  },

  "Resources" : {

    "Environment": {
      "Type": "Custom::StackOutputs",
      "Properties": {
        "ServiceToken": { "Ref" : "StackOutputsArn" },
        "StackName" : "environment"
      }
    },

    "Network": {
      "Type": "Custom::StackOutputs",
      "Properties": {
        "ServiceToken": { "Ref" : "StackOutputsArn" },
        "StackName" : "network"
      }
    },

    "ECS": {
      "Type": "Custom::StackOutputs",
      "Properties": {
        "ServiceToken": { "Ref" : "StackOutputsArn" },
        "StackName" : "ecs"
      }
    },

    "LambdaFunctionRole" : {
      "Type": "AWS::IAM::Role",
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Version" : "2012-10-17",
          "Statement": [{
            "Effect": "Allow",
            "Principal": {
              "Service": [ "lambda.amazonaws.com" ]
            },
            "Action": [ "sts:AssumeRole" ]
          }]
        },
        "Path": "/",
        "Policies": [
          {
            "PolicyName": "root",
            "PolicyDocument": {
              "Version" : "2012-10-17",
              "Statement": [
                {
                  "Effect": "Allow",
                  "Action": [
                    "logs:CreateLogGroup",
                    "logs:CreateLogStream",
                    "logs:PutLogEvents"
                  ],
                  "Resource": [ "arn:aws:logs:*:*:*" ]
                },
                {
                  "Effect": "Allow",
                  "Action": [
                    "dynamodb:DescribeStream",
                    "dynamodb:GetRecords",
                    "dynamodb:GetShardIterator",
                    "dynamodb:ListStreams"
                  ],
                  "Resource": "*"
                },
                {
                  "Effect": "Allow",
                  "Action": [
                    "ec2:*"
                  ],
                  "Resource": "*"
                },
                {
                  "Effect": "Allow",
                  "Action": [
                    "es:*"
                  ],
                  "Resource": "*"
                },
                {
                  "Effect": "Allow",
                  "Action": [
                    "s3:*"
                  ],
                  "Resource": "*"
                },
                {
                  "Effect": "Allow",
                  "Action": [
                    "lambda:*"
                  ],
                  "Resource": "*"
                }
              ]
            }
          }
        ]
      }
    },

    "LambdaFunctionToken": {
      "Type" : "AWS::Lambda::Function",
      "Properties" : {
        "Description" : { "Ref" : "FunctionDescription" },
        "Runtime" : "nodejs4.3",
        "MemorySize" : "512",
        "Timeout" : "300",
        "Handler" : "index.handler",
        "Role" : {"Fn::GetAtt" : ["LambdaFunctionRole", "Arn"] },
        "Code" : {
          "S3Bucket" : { "Fn::GetAtt" : ["Environment", "ResourceBucket"] },
          "S3Key" : { "Fn::Join" : ["", [
            "lambda/", { "Ref" : "FunctionPackage" }, "_", { "Ref" : "FunctionVersion" }, ".zip"
          ]] }
        },
        "VpcConfig": {
          "SecurityGroupIds" : [ { "Fn::GetAtt" : ["ECS", "SecurityGroupTwo"] } ],
          "SubnetIds" : [
            { "Fn::GetAtt": [ "Network", "PrivateSubnetA" ] },
            { "Fn::GetAtt": [ "Network", "PrivateSubnetB" ] },
            { "Fn::GetAtt": [ "Network", "PrivateSubnetC" ] }
          ]
        }
      }
    },

    "HodorScheduledEvent": {
      "Type": "AWS::Events::Rule",
      "DependsOn": "LambdaFunctionToken",
      "Properties": {
        "ScheduleExpression": { "Ref" : "ScheduleExpression" },
        "State": "ENABLED",
        "Targets": [{
          "Arn": {"Fn::GetAtt" : ["LambdaFunctionToken", "Arn"] },
          "Id": "HodorScheduledEvent",
          "Input": { "Fn::Join" : ["", [
            "{",
              "\"search_url\": \"http://search.internal-stockflare.com/filter\",",
              "\"site_url\": \"https://stockflare.com\",",
              "\"search_body\": {\"conditions\": { \"sic\": \">0\" }},",
              "\"sitemap_bucket\": \"stockflare.com\",",
              "\"stocks_path\": \"$/stocks/\"",
             "}"
          ]]}
        }]
      }
    },

    "PermissionForHodorScheduledEvent": {
      "Type": "AWS::Lambda::Permission",
      "DependsOn": "LambdaFunctionToken",
      "Properties": {
        "FunctionName": { "Ref": "LambdaFunctionToken" },
        "Action": "lambda:InvokeFunction",
        "Principal": "events.amazonaws.com",
        "SourceArn": { "Fn::GetAtt": ["HodorScheduledEvent", "Arn"] }
      }
    },

    "SnowScheduledEvent": {
      "Type": "AWS::Events::Rule",
      "DependsOn": "LambdaFunctionToken",
      "Properties": {
        "ScheduleExpression": { "Ref" : "ScheduleExpression" },
        "State": "ENABLED",
        "Targets": [{
          "Arn": {"Fn::GetAtt" : ["LambdaFunctionToken", "Arn"] },
          "Id": "SnowScheduledEvent",
          "Input": { "Fn::Join" : ["", [
            "{",
              "\"search_url\": \"http://search.internal-stockflare.com/filter\",",
              "\"site_url\": \"https://m.stockflare.com\",",
              "\"search_body\": {\"conditions\": { \"sic\": \">0\" }},",
              "\"sitemap_bucket\": \"m.stockflare.com\",",
              "\"stocks_path\": \"stock/\"",
             "}"
          ]]}
        }]
      }
    },

    "PermissionForSnowScheduledEvent": {
      "Type": "AWS::Lambda::Permission",
      "DependsOn": "LambdaFunctionToken",
      "Properties": {
        "FunctionName": { "Ref": "LambdaFunctionToken" },
        "Action": "lambda:InvokeFunction",
        "Principal": "events.amazonaws.com",
        "SourceArn": { "Fn::GetAtt": ["SnowScheduledEvent", "Arn"] }
      }
    },

    "AmpScheduledEvent": {
      "Type": "AWS::Events::Rule",
      "DependsOn": "LambdaFunctionToken",
      "Properties": {
        "ScheduleExpression": { "Ref" : "ScheduleExpression" },
        "State": "ENABLED",
        "Targets": [{
          "Arn": {"Fn::GetAtt" : ["LambdaFunctionToken", "Arn"] },
          "Id": "AmpScheduledEvent",
          "Input": { "Fn::Join" : ["", [
            "{",
              "\"search_url\": \"http://search.internal-stockflare.com/filter\",",
              "\"site_url\": \"https://amp-api.stockflare.com\",",
              "\"search_body\": {\"conditions\": { \"sic\": \">0\" }},",
              "\"sitemap_bucket\": \"amp-s3bucket-ffpfku8d517k\",",
              "\"stocks_path\": \"stock?ric=\"",
             "}"
          ]]}
        }]
      }
    },

    "PermissionForAmpScheduledEvent": {
      "Type": "AWS::Lambda::Permission",
      "DependsOn": "LambdaFunctionToken",
      "Properties": {
        "FunctionName": { "Ref": "LambdaFunctionToken" },
        "Action": "lambda:InvokeFunction",
        "Principal": "events.amazonaws.com",
        "SourceArn": { "Fn::GetAtt": ["AmpScheduledEvent", "Arn"] }
      }
    }

  },

  "Outputs" : {

    "Token" : {
      "Description" : "Retrieve Lambda Function Name",
      "Value" : { "Ref" : "LambdaFunctionToken" }
    },

    "TokenArn" : {
      "Description" : "Lambda Function ARN",
      "Value" : { "Fn::Join": [ "", [
        "arn:aws:lambda:", { "Ref": "AWS::Region" },
        ":", { "Ref": "AWS::AccountId" }, ":function:",
        { "Ref" : "LambdaFunctionToken"}
      ]]}
    }

  }
}
